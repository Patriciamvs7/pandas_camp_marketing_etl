# -*- coding: utf-8 -*-
"""Projeto_10-03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ac4Yx6Nfg9_fYVF9FIkq21FUsB-L6MY

##Bibliotecas e instalações
"""

pip install gcsfs

pip install pandera

import pandas as pd
import os
import numpy as np
from google.cloud import storage
import pandera as pa
import pymongo
from pymongo import MongoClient

pd.set_option('display.max_columns',100)

"""##Conexões """

serviceAccount = '/content/beaming-grid-377819-7f0dacaac200.json'
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = serviceAccount

path = 'gs://projetosoulcode01/Brutos/marketing_campaign.csv'

uri = "mongodb+srv://patriciamvsantos.la9nyeq.mongodb.net/?authSource=%24external&authMechanism=MONGODB-X509&retryWrites=true&w=majority"
client = MongoClient(uri,
                     tls=True,
                     tlsCertificateKeyFile='/content/X509-cert-3059144888346686810.pem',
                     )
db = client['projeto_one']
colecao_bruto = db['original']
colecao_tratado = db['tratado']

colecao_bruto.count_documents({})

"""##Extração dos dados"""

df = pd.read_csv(path, sep=';',encoding='ISO-8859-1',parse_dates=['Dt_Customer'])

"""##Pré analise"""

df.head(5)

df.dtypes

df.tail(5)

df.shape

df_backup = df.copy()

#Retirando o rótulo
df_backup.set_index('ï»¿ID',inplace=True)

df_backup.head(5)

#Carregando os dados brutos para o mongo
df_mongo = df_backup.to_dict('records')
colecao_bruto.insert_many(df_mongo)

#Quantidade de documentos na coleção brutos
colecao_bruto.count_documents({})

"""##Tratamento"""

df.rename(columns={'ï»¿ID':'codigo',	
                   'Year_Birth':'aniver_ano',	'Education':'educacao',	'Marital_Status':'estado_civil',
                   'Income':'renda',	'Kidhome':'qtd_crianca',	'Teenhome':'qtd_adolescente',	
                   'Dt_Customer':'data_cliente',	'Recency':'atualidade',	'MntWines':'valor_vinho',	
                   'MntFruits':'valor_frutas',	'MntMeatProducts':'valor_carne',	
                   'MntFishProducts':'valor_peixes', 'MntSweetProducts':'produtos_doces',
                   'MntGoldProds':'pontas_de_ouro','NumDealsPurchases':'desconto_nas_compras',
                   'NumWebPurchases':'compras_no_site','NumCatalogPurchases':'compras_no_catalogo',
                   'NumStorePurchases':'compras_na_loja','NumWebVisitsMonth':'visita_site_mes',
                   'AcceptedCmp3':'aceitou_cmp3','AcceptedCmp4':'aceitou_cmp4','AcceptedCmp5':'aceitou_cmp5',
                   'AcceptedCmp1':'aceitou_cmp1','AcceptedCmp2':'aceitou_cmp2','Complain':'reclamar',
                   'Z_CostContact':'contato_de_custos','Z_Revenue':'receita','Response':'resposta'}, inplace=True)

df.head(5)

pd.unique(df['educacao'])

df.loc[df.educacao == 'Graduation',['educacao']] = 'Graduacao'
df.loc[df.educacao == 'Master',['educacao']] = 'Mestre'
df.loc[df.educacao == 'Basic',['educacao']] = 'Basico'
df.loc[df.educacao == '2n Cycle',['educacao']] = '2n Ciclo'

pd.unique(df['estado_civil'])

df.loc[df.estado_civil == 'Single',['estado_civil']] = 'Solteiro'
df.loc[df.estado_civil == 'Together',['estado_civil']] = 'Junto'
df.loc[df.estado_civil == 'Married',['estado_civil']] = 'Casado'
df.loc[df.estado_civil == 'Divorced',['estado_civil']] = 'Divorciado'
df.loc[df.estado_civil == 'Widow',['estado_civil']] = 'Viuvo'

df.loc[df.estado_civil == 'YOLO',['estado_civil']] = 'So se vive uma vez'
df.loc[df.estado_civil == 'Alone',['estado_civil']] = 'Sozinho'
df.loc[df.estado_civil == 'Absurd',['estado_civil']] = 'Absurdo'

df.head(5)

#verificando se a coluna codigo tem valores únicos
df.codigo.is_unique

df.loc[df.estado_civil == 'So se vive uma vez']



#verificando dados nulos
df.isna().sum()

#verificando os dados unicos da renda, para achar se os dados nulos é na ou nan
sorted(pd.unique(df['renda']))



df.count()

#verificando se na renda os dados nulos estão de acordo com o tipo de dado da tabela
df_na = df.renda.isna()
df.loc[df_na]

"""##Criação do Schema"""

df.head(2)

schema = pa.DataFrameSchema(
    columns = {'codigo':pa.Column(pa.Int),'aniver_ano':pa.Column(pa.Int),
               'educacao':pa.Column(pa.String),'estado_civil':pa.Column(pa.String),
               'renda':pa.Column(pa.Float, nullable=True),'qtd_crianca':pa.Column(pa.Int),
               'qtd_adolescente':pa.Column(pa.Int),'data_cliente':pa.Column(pa.DateTime),
               'atualidade':pa.Column(pa.Int),'valor_vinho':pa.Column(pa.Int),
               'valor_frutas':pa.Column(pa.Int),'valor_frutas':pa.Column(pa.Int),
               'valor_carne':pa.Column(pa.Int),'valor_peixes':pa.Column(pa.Int),
               'produtos_doces':pa.Column(pa.Int),'pontas_de_ouro':pa.Column(pa.Int),
               'desconto_nas_compras':pa.Column(pa.Int),'compras_no_site':pa.Column(pa.Int),
               'compras_no_catalogo':pa.Column(pa.Int),'compras_na_loja':pa.Column(pa.Int),
               'visita_site_mes':pa.Column(pa.Int),'aceitou_cmp3':pa.Column(pa.Int),
               'aceitou_cmp4':pa.Column(pa.Int),'aceitou_cmp5':pa.Column(pa.Int),'aceitou_cmp1':pa.Column(pa.Int),
               'aceitou_cmp2':pa.Column(pa.Int),'reclamar':pa.Column(pa.Int),'contato_de_custos':pa.Column(pa.Int),
               'receita':pa.Column(pa.Int)
    }
)

schema.validate(df)

df.dtypes

"""#Agrupamento e graficos"""

df.head(3)

#Qual a quantidade de doces foram comprados por clientes que tem crianças em casa em 2014
ft_2014 = df.data_cliente.dt.year == 2014
df_2014 = df.loc[ft_2014]

df_2014.groupby(['qtd_crianca'])['produtos_doces'].size().sort_values(ascending=True)

#Qual a quantidade de doces foram comprados por clientes que tem crianças em casa em 2014
ft_2014 = df.data_cliente.dt.year == 2014
df_2014 = df.loc[ft_2014]

df_2014.groupby(['qtd_crianca'])['produtos_doces'].size().sort_values(ascending=True).plot.pie()

'''
De acordo com o primeiro gráfico podemos concluir que a quantidade de doces 
comprados nessa campanha de marketing é inversamente proporcional a quantidade 
de crianças existentes na casa dos clientes. Quem não tem criança compra 16x mais  
doces do que as pessoas que as pessoas que possuem 2 crianças em casa.
'''

#Quantos códigos aceitaram comprar já na primeira campanha
df.groupby(['aceitou_cmp1'])['codigo'].size().sort_values(ascending=True)

#quantidade de clientes aceitaram ou não a primeira campanha
df.groupby(['aceitou_cmp1'])['codigo'].size().sort_values(ascending=True).plot.pie(xlabel='Primeira Campanha',ylabel='Numero de clientes')

'''
Já no segundo grafico podemos observar que somente 6,4% das pessoas aceitaram a 
oferta já na primeira campanha
Por motivo de comparação fizemos o segundo gráfico para comparar a quantidade de 
pessoas que aceitaram a oferta somente na ultima campanha e o valor aumentou 
significativamente 132%
'''

df.groupby(['resposta'])['codigo'].size().sort_values(ascending=True)

df.groupby(['resposta'])['codigo'].size().sort_values(ascending=True).plot.bar(figsize=(12,8))

#Quantidade de dias desde a ultima compra por estado civil
df.groupby(['estado_civil'])['atualidade'].size().sort_values(ascending=True)

df.groupby(['estado_civil'])['atualidade'].size().sort_values(ascending=True).plot.bar(figsize=(12,8))

'''
No 4º gráfico observamos que pessoas casadas ficam muito mais tempo sem comprar 
com relação aos não acompanhados
'''



df.head(4)

#comparativo de ano de aniversário em ordem cronológica
#obs: a ordem não está vindo correta
df.groupby(['aniver_ano']).size().sort_values(ascending=True)

#Quantidade de compras via site por ano de aniversário do cliente

df.groupby(['aniver_ano'])['compras_no_site'].size().sort_values(ascending=True).plot.bar(figsize=(12,8))

'''
No ultimo gráfico pudemos observar que a campanha de marketing teve um publico alvo 
de pessoas com uma idade bem diversa e as pessoas que mais fizeram compras via site
nesta campanha possuem relativamente a mesma faixa etária entre 42-55 anos, por tanto 
é interessante direcionar mais campanhas de marketing digital para esse publico
'''

"""# LOAD"""

df.set_index('codigo',inplace=True)

df.to_csv('gs://projetosoulcode01/Tratados/marketing_campaign.csv',index=False)



#inserindo os dados tratados no mongo
colecao_tratado.insert_many(df.to_dict('records'))

colecao_tratado.count_documents({})

